{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["regexPattern","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","removeGtTitle","title","replace","finalFunc","index","reg","state","redditData","filter","basketball","test","data","length","dataArr","console","log","children","body","goodText","match","react_default","a","createElement","href","target","style","fontStyle","dataObject","stateArr","dataCopy","slice","push","setState","renderList","threads","map","hit","key","created_utc","url","fontWeight","text","loading","comments","thread","num","num2","num3","linksArr","arr","_this2","fetch","then","response","json","_this3","commentArr","i","content","d","Date","className","onClick","window","open","getDay","getMonth","getDate","Component","Boolean","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a3834752.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles.css\";\nimport { Component } from \"react\";\n\nconst API = \"https://www.reddit.com/r/ncaaBBallStreams.json\";\nlet regexPattern = /(?:(?:https?|ftp|file):\\/\\/|www\\.|ftp\\.)(?:\\([-A-Z0-9+&@#\\/%=~_|$?!:,.]*\\)|[-A-Z0-9+&@#\\/%=~_|$?!:,.])*(?:\\([-A-Z0-9+&@#\\/%=~_|$?!:,.]*\\)|[A-Z0-9+&@#\\/%=~_|$])/gim;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      redditData: [],\n      text: \"\",\n      loading: true,\n      comments: \"\",\n      thread: [],\n      num: 0,\n      num2: 0,\n      num3: 0,\n      linksArr: [],\n      dataArr: [],\n      arr: [\n        \"first link\",\n        \"second link\",\n        \"third link\",\n        \"fourth link\",\n        \"fifth link\",\n        \"sixth link\",\n        \"seventh link\"\n      ]\n    };\n  }\n\n  componentDidMount() {\n    fetch(API)\n      .then(response => response.json())\n      .then(data =>\n        this.setState({ redditData: data.data.children, loading: false })\n      );\n  }\n\n  removeGtTitle = title => {\n    //\n    return title.replace(\"Game thread: \", \"\");\n  };\n\n  finalFunc = index => {\n    debugger;\n    let reg = /^Game/;\n    const threads = this.state.redditData.filter(basketball =>\n      reg.test(basketball.data.title)\n    );\n    if (threads.length === this.state.dataArr.length) {\n      console.log(this.state.dataArr[index][1].data.children[1].data.body);\n      let fuckyText = this.state.dataArr[index][1].data.children[1].data.body;\n      let goodText = fuckyText.match(regexPattern);\n      return <a href={goodText[0]} target=\"_blank\" style={{fontStyle: \"italic\"}}>Watch live here</a>\n    }\n  };\n\n  dataObject = data => {\n    //console.log(JSON.stringify(data));\n    //console.log(\"the first link\", this.state.num3);\n    let stateArr = this.state.dataArr;\n    let dataCopy = data.slice();\n    stateArr.push(dataCopy);\n    this.setState({ dataArr: stateArr });\n    //console.log(data);\n    //console.log(\"you beter fucking save 1:36am 3/20/19\");\n  };\n\n  componentDidUpdate() {\n    let reg = /^Game/;\n    const threads = this.state.redditData.filter(basketball =>\n      reg.test(basketball.data.title)\n    );\n    let commentArr = [];\n    debugger;\n    if (this.state.num < threads.length) {\n      for (let i = 0; i < threads.length; i++) {\n        commentArr.push(threads[i].data.url);\n      }\n      this.setState({ num: this.state.num + 1, linksArr: commentArr });\n    }\n    //console.log(this.state.linksArr.length);\n    if (this.state.num2 < 1 && this.state.linksArr.length > 0) {\n      //do the shit in here only once\n      //allows you to update the state in the didUpdate()\n      for (let i = 0; i < this.state.linksArr.length; i++) {\n        //fetch in here each of comment links\n        //console.log(this.state.linksArr[0]);\n        fetch(this.state.linksArr[i] + \".json\")\n          .then(response => response.json())\n          .then(data => this.dataObject(data));\n        this.setState({ num3: this.state.num3 + 1 });\n      }\n      this.setState({ num2: this.state.num2 + 1 });\n    }\n    // console.log('num of threads',threads.length)\n    // console.log('num of data arr',this.state.dataArr.length)\n    if (threads.length === this.state.dataArr.length) {\n      console.log(\"cant believe you got this far\");\n      // console.log(this.state.dataArr);\n      // //the first array index value will actually be the map index\n      // console.log(this.state.dataArr[0][1].data.children[1].data.body);\n    }\n  }\n\n  renderList = threads => {\n    if (threads.length === 0) {\n      return <li> No NCAA games goin on right now. Check back later! </li>;\n    } else {\n      return threads.map((hit, index) => (\n        <li key={hit.data.created_utc}>\n          <a href={hit.data.url} target=\"_blank\" style={{ fontWeight: \"bold\" }}>\n            {this.removeGtTitle(hit.data.title)}\n          </a>\n\n          {/*<div> {this.state.arr[index]} </div> */}\n          <div> {this.finalFunc(index)} </div>\n          <br />\n        </li>\n      ));\n    }\n  };\n\n  render() {\n    /*const threads = this.state.redditData.filter(\n      game => game.data.link_flair_css_class === \"gamethread\"\n    );\n    */\n    let reg = /^Game/;\n    const threads = this.state.redditData.filter(basketball =>\n      reg.test(basketball.data.title)\n    );\n    let d = new Date();\n    let months = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\"\n    ];\n    let days = [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\"\n    ];\n    let content;\n    if (this.state.loading) {\n      content = (\n        <h2 className=\"loading\">\n          {\" \"}\n          grabbing all the latest ncaa games, hold up! <br />\n          <br />\n          <br />\n          <div className=\"loader\"> </div>\n        </h2>\n      );\n    } else {\n      content = (\n        <div>\n          <br />\n          <h2\n            onClick={() => window.open(\"https://campusstreams.ga\")}\n            className=\"weather\"\n          >\n            {\" \"}\n            NCAA March Madness Games for {days[d.getDay()]},{\" \"}\n            {months[d.getMonth()]} {d.getDate()}\n          </h2>\n          <ol className=\"center\">{this.renderList(threads)}</ol>\n        </div>\n      );\n    }\n    return <div> {content} </div>;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}